String class: In java, string is basically an object that represents sequence of char values/sequence of characters.
Strings Are Immutable Objects (you have assigned a String a value, that value can never changeâ€” it's immutable), 16-bit Unicode

Suppose : String x = "Java";
          x.concat(" Rules!");
          System.out.println("x = " + x); // output is just Java , in the 2nd string object is instantly lost as its not ben referred.

String constant pool : the JVM encounters if there are any existing referred string been existed and no new String literal object is created.
The java.lang.String class implements Serializable, Comparable and CharSequence interfaces.

Two ways to create String object:
By string literal : created by using ""; This will check the strings are present in the String constant pool, if yes, reference to the pool instance is returned.
By new keyword : String s=new String("Welcome"); //creates two objects and one reference variable.
        JVM will create a new string object in normal(non pool) heap memory and the literal "Welcome" will be placed in the string constant pool.
        The variable s will refer to the object in heap(non pool).

It is used in authentication (by equals() method), sorting (by compareTo() method), reference matching (by == operator) etc.

java string compareTo() method compares the given string with current string lexicographically.

In java, String concatenation is implemented through the StringBuilder (or StringBuffer) class and its append method.

A string that can be modified or changed is known as mutable string. StringBuffer and StringBuilder classes are used for creating mutable string.

When you really need to know if two references are identical, use ==. But when
you need to know if the objects themselves (not the references) are equal, use the
equals() method. // Diff btw == (for reference values) and equals() (for the objects itself).