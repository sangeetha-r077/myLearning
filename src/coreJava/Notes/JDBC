Java JDBC is a java API to connect and execute query with the database. JDBC API uses jdbc drivers to connect with the database.
JDBC-ODBC bridge driver : The JDBC-ODBC bridge driver uses ODBC driver to connect to the database. The JDBC-ODBC bridge driver converts JDBC method calls into the ODBC function calls.
Native-API driver (partially java driver) :  uses the client-side libraries of the database. The driver converts JDBC method calls into native calls of the database API.
Network Protocol driver (fully java driver)  : uses middleware (application server) that converts JDBC calls directly or indirectly into the vendor-specific database protocol
Thin driver (fully java driver) : converts JDBC calls directly into the vendor-specific database protocol.

5 Steps to connect to the database in java:
Register the driver class
Creating connection
Creating statement
Executing queries
Closing connection

try{
Class.forName("oracle.jdbc.driver.OracleDriver");
Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","oracle");
Statement stmt=con.createStatement();
ResultSet rs=stmt.executeQuery("select * from emp");
con.close();
}
catch (Exception e)


DriverManager class acts as an interface between user and drivers.
It keeps track of the drivers that are available and handles establishing a connection between a database and the appropriate driver.

A Connection is the session between java application and database.
The Connection interface is a factory of Statement, PreparedStatement, and DatabaseMetaData.

The Statement interface provides methods to execute queries with the database.
The statement interface is a factory of ResultSet i.e. it provides factory method to get the object of ResultSet.

The object of ResultSet maintains a cursor pointing to a row of a table. Initially, cursor points to before the first row.

Prepared Statement : The PreparedStatement interface is a subinterface of Statement. It is used to execute parameterized query.
The performance of the application will be faster if you use PreparedStatement interface because query is compiled only once.

CallableStatement interface is used to call the stored procedures and functions.

boolean execute()
Executes the SQL statement in this PreparedStatement object, which may be any kind of SQL statement.

ResultSet executeQuery()
Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.

int executeUpdate()
Executes the SQL statement in this PreparedStatement object, which must be an SQL INSERT, UPDATE or DELETE statement; or an SQL statement that returns nothing, such as a DDL statement.

